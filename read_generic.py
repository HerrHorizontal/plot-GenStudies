import ROOT
import sys
import os
import glob
from array import array
from numpy import ceil



def main (infiles = sys.argv[1:]):
	''' 
	read files and write ttbb event data into histograms
	use data generated by different generators respectively
	execute with "python read.py <PATH/TO/NTUPLES/*.root>"
	'''
	if len(infiles)>1: True
	elif len(infiles)==1: infiles=glob.glob(os.path.dirname(os.path.abspath(infiles[0])) + '*.root')

	chain = getChain(infiles = infiles)
	Histos = getListOfHistos(chain = chain, additionalvetoes = [],jetordered = True)
	fillHistos(Histos = Histos, TChain = chain)
	writeHistos(Histos = Histos, origin = os.path.dirname(os.path.abspath(infiles[0])))



def getChain(infiles):
	'''
	read all the .root files and add the corresponding tree (here: MVATree) into a TChain
	'''
	chain=ROOT.TChain("MVATree")
	for inpath in infiles:
		inpath = os.path.abspath(inpath)
		chain.Add(inpath)
	print "Read in " + str(chain.GetNtrees()) + " files."
	return chain



def getListOfHistos(chain, additionalvetoes = [],jetordered = True):
	'''
	Generate list of interesting TBranch in TChain and initialize corresponding histograms with Sumw2 called.
	If there is a GenJet_Pt branch, optionally make also pT ordered histograms.
	Veto for uninteresting quantities to reduce dimensionality.
	'''
	vetoes = ["GenCJet", "GenHiggs", "CHadron", "Q1", "Q2", "_W_", "_Nu_", "_Lep_", 
	"PDGID", "Idx", "Evt_ID", "GenEvt", "Reco", "Tags",
	"Trigger", "SF", "Weight_CSV", "Weight_LHA", "Weight_PU", "Weight_pu", "GenWeight", "variation"]

	for addveto in additionalvetoes:
		vetoes.append(addveto)

	# make a list of branch names
	lBranches = chain.GetListOfBranches()
	branchnames = []
	for branch in lBranches:
		branchnames.append(branch.GetName())

	Histos = []
	for bname in branchnames:
		# perform vetoes
		if any(x in bname for x in vetoes): 
			print str(bname) + " vetoed"
			continue
		print str(bname) + " keeped"

		# set the binning of the histograms
		if "_Pt" in bname or "HadronPt" in bname:
			xmin = 0.0
			xmax = 2500.0
			nbins = int(ceil((xmax-xmin)/10))
		elif "_E" in bname:
			xmin = 0.0
			xmax = 4200.0
			nbins = int(ceil((xmax-xmin)/10))
		elif "_Dr" in bname:
			xmin = 0.0
			xmax = 12.0
			nbins = int(ceil((xmax-xmin)/0.01))
		elif "_M" in bname:
			xmin = 0.0
			xmax = 2000.0
			nbins = int(ceil((xmax-xmin)/10))
		elif "_Phi" in bname:
			xmin = -3.5
			xmax = 3.5
			nbins = int(ceil((xmax-xmin)/0.01))
		elif "_Eta" in bname:
			if "Hadron" in bname:
				xmax = 8.0
			elif "Jet" in bname:
				xmax = 3.0
			xmin = -xmax
			nbins = int(ceil((xmax-xmin)/0.01))
		elif "N_" in bname or "NHadrons" in bname:
			xmin = -0.5
			xmax = 30.5
			nbins = int(ceil((xmax-xmin)/1))
		elif "Weight" in bname:
			if "GenValue" in bname or "GEN_nom" in bname:
				xmin = -500
				xmax = -xmin
				nbins =int(ceil((xmax-xmin)/1))
			else:
				xmin = 0.0
				xmax = 1.0
				nbins = int(ceil((xmax-xmin)/0.001))
		else:
			xmin = chain.GetMinimum(bname)
			xmax = chain.GetMaximum(bname)
			nbins = 300

		# if the flag jetordered is set True, make additional six Pt ordered GenJet_Pt histograms
		# declare the histograms and set the bins
		if jetordered:
			if bname == "GenJet_Pt":
				names = ["_", "_1st_","_2nd_","_3rd_","_4th_","_5th_", "_6th_"]
				for x in names:
					nbname = x.join(bname.rsplit("_", 1))
					h = ROOT.TH1D()
					h.SetName(nbname)
					h.SetTitle(nbname)
					h.SetBins(nbins, xmin, xmax)
					#h.SetMinimum(xmin)
					#h.SetMaximum(xmax)
					h.Sumw2()
					Histos.append(h)
			else:
				h = ROOT.TH1D()
				h.SetName(bname)
				h.SetTitle(bname)
				h.SetBins(nbins, xmin, xmax)
				#h.SetMinimum(xmin)
				#h.SetMaximum(xmax)
				h.Sumw2()
				Histos.append(h)

		else:
			h = ROOT.TH1D()
			h.SetName(bname)
			h.SetTitle(bname)
			h.SetBins(nbins, xmin, xmax)
			#h.SetMinimum(xmin)
			#h.SetMaximum(xmax)
			h.Sumw2()
			Histos.append(h)

	print "You have chosen " + str(len(Histos)) + " physical quantities from originally " + str(len(branchnames)) + " available."
	#print "The corresponding histograms are: \n" + str(Histos)	
	return Histos



def fillHistos(TChain, Histos):
	''' 
	Fill the weighted data into the histos if the event is a tt+b-jets event.
	'''
	ievt=0
	for e in TChain:
		ievt+=1
		if ievt%5000==0:
			print "at event", ievt

		if not e.GenEvt_I_TTPlusBB > 0: continue    # GenEvt_I_TTPlusBB =1 for ttb =2 for tt2b =3 for ttbb

		for ih,h in enumerate(Histos):
			# for the first, second, ... leading jet histogram: fill it
			names = ["1st_Pt","2nd_Pt","3rd_Pt","4th_Pt","5th_Pt", "6th_Pt"]
			if any( x in h.GetName() for x in names):
				# loop over all possible histograms and fill them with the according jet pT
				for istr, string in enumerate(["1st", "2nd", "3rd", "4th", "5th", "6th"]):
					if "GenJet_" + string in h.GetName():
						# convert the read-write buffer ptr into a list
						dummy = e.GenJet_Pt
						if len(dummy)>=istr:
							b = []
							for i in range(len(dummy)):
								b.append(dummy[i])
							# sort it
							b.sort()
							# fill the histograms
							h.Fill(b[-istr], e.Weight_GEN_nom*e.Weight_XS)
					else:
						continue
			else:
				# fill the histograms for all other quantities
				# convert the read-write buffer ptr into a python list
				dummy = getattr(e, h.GetName())
				b = []
				if isinstance(dummy, (int, long, float)):
					dummy = [dummy]
				for i in range(len(dummy)):
					b.append(dummy[i])
				# fill the histogram
				for l in range(len(b)):
					h.Fill(b[l], e.Weight_GEN_nom*e.Weight_XS)



def writeHistos(Histos, origin):
	''' 
	Write the histos into a new root file depending on the type of generated data used. 
	'''
	if all(x in origin for x in ["ttbb", "amcatnlo"]):
		f = ROOT.TFile("ttbb_4FS_amcatnlo_Histos.root","recreate")
		for h in Histos:
			h.Write()
		f.Close()
	    
	    
	elif all(x in origin for x in ["TTbb", "Powheg"]):
		f = ROOT.TFile("ttbb_4FS_Powheg_OL_Histos.root","recreate")
		for h in Histos:
			h.Write()
		f.Close()

	elif all(x in origin for x in ["TTJets", "amcatnlo"]):
		f = ROOT.TFile("ttjets_Histos.root","recreate")
		for h in Histos:
			h.Write()
		f.Close()

	elif "TTToSemi" in origin:
		f = ROOT.TFile("tt_semileptonic_Histos.root","recreate")
		for h in Histos:
			h.Write()
		f.Close()



if __name__ == '__main__':
	main()