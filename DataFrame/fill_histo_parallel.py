import ROOT
import sys
import os
import glob
from array import array
from numpy import ceil
from optparse import OptionParser

def parse_args():
	usage = '%prog [options] path/to/ntuples\n' 
	parser = OptionParser(usage = usage)

	parser.add_option( 
		"-l", "--lowerEdge",
		help = "Start at this event",
		dest = "low_edge",
		type = "int"
		)
	parser.add_option( 
		"-u", "--upperEdge",
		help = "End with this event",
		dest = "up_edge",
		type = "int"
		)
	parser.add_option( 
		"-n", "--batch-number",
		help = "Specify the batch number of these histograms, which corresponds to the event range given. ",
		dest = "n_batch",
		type = "int"
		)

	options, args = parser.parse_args()
	
	return options, args



def main ():
	''' 
	read files and write ttbb event data into histograms
	use data generated by different generators respectively
	execute with "python read.py <PATH/TO/NTUPLES/*.root>"
	'''
	options, infiles = parse_args()

	# # specify the suffix for the .root file which contains the histograms, default: ""
	# n_batch = options.n_batch
	# suffix = ""
	# if n_batch != None:
	# 	suffix = str(n_batch)

	onlyone = True
	if len(infiles)>1: 
		True
	elif len(infiles)==1 and not onlyone: 
		datadir = os.path.dirname(os.path.abspath(infiles[0]))
		infiles=glob.glob(datadir+"/"+os.path.basename(datadir) + '*.root')
	elif onlyone:
		infiles = os.path.abspath(infiles[0])
		infiles = [infiles]

	for infile in infiles:
		infile = os.path.abspath(infile)

	chain = getChain(infiles = infiles)

	HistoModels = makeListOfHistoModels(chain = chain, additionalvetoes = [],jetordered = True)
	Histos = fillHistosParallel(chain = chain, HistoModels = HistoModels) 
	# writeHistos(Histos = Histos, origin = os.path.dirname(os.path.abspath(infiles[0])) )



def getChain(infiles):
	'''
	read all the .root files and add the corresponding tree (here: MVATree) into a TChain
	'''
	chain=ROOT.TChain("MVATree")
	for inpath in infiles:
		inpath = os.path.abspath(inpath)
		# print "checking file", inpath
		f = ROOT.TFile(inpath)
		if f.IsOpen():
			if not f.IsZombie() and not f.TestBit(ROOT.TFile.kRecovered):
				chain.Add(inpath)
				continue
			else:
				f.Close()
		print "file '%s' is broken!" % inpath
	print "Read in " + str(chain.GetNtrees()) + " files."
	return chain



def makeListOfHistoModels(chain, additionalvetoes = [],jetordered = True):
	'''
	Generate list of interesting TBranch in TChain and initialize corresponding histograms with Sumw2 called.
	If there is a GenJet_Pt branch, optionally make also pT ordered histograms.
	Veto for uninteresting quantities to reduce dimensionality.
	'''
	vetoes = ["GenCJet", "GenHiggs", "CHadron", "Q1", "Q2", "_W_", "_Nu_", "_Lep_", "fromTTH", "FromTopType", "TopPt",
	"PDGID", "Idx", "Evt_ID", "GenEvt", "Reco", "Tags",
	"Trigger", "SF", "Weight_CSV", "Weight_LHA", "Weight_PU", "Weight_pu", "GenWeight", "variation"]

	for addveto in additionalvetoes:
		vetoes.append(addveto)

	# make a list of branch names
	lBranches = chain.GetListOfBranches()
	branchnames = []
	for branch in lBranches:
		branchnames.append(branch.GetName())

	HistoModels = []
	for bname in branchnames:
		# perform vetoes
		if any(x in bname for x in vetoes): 
			# print str(bname) + " vetoed"
			continue
		#print str(bname) + " keeped"

		xmin = xmax = None
		nbins = None

		# set the binning of the histograms
		if bname.endswith("_Pt") or bname.endswith("HadronPt"):
			xmin = 0.0
			xmax = 2500.0
			nbins = int(ceil((xmax-xmin)/10))
		elif bname.endswith("_Eta"):
			if "Hadron" in bname:
				xmax = 8.0
			elif "Jet" in bname:
				xmax = 3.0
			else:
				xmax = 4.0
			xmin = -xmax
			nbins = int(ceil((xmax-xmin)/0.01))
		elif bname.endswith("_E"):
			xmin = 0.0
			xmax = 4200.0
			nbins = int(ceil((xmax-xmin)/10))
		elif bname.endswith("_Dr"):
			xmin = 0.0
			xmax = 12.0
			nbins = int(ceil((xmax-xmin)/0.01))
		elif bname.endswith("_M"):
			xmin = 0.0
			xmax = 2000.0
			nbins = int(ceil((xmax-xmin)/10))
		elif bname.endswith("_Phi"):
			xmin = -3.5
			xmax = 3.5
			nbins = int(ceil((xmax-xmin)/0.01))
		elif bname.startswith("Weight"):
			if bname.endswith("GenValue") or bname.endswith("GEN_nom"):
				xmin = -500
				xmax = -xmin
				nbins =int(ceil((xmax-xmin)/1))
			else:
				xmin = 0.0
				xmax = 1.0
				nbins = int(ceil((xmax-xmin)/0.001))
		elif bname.startswith("N_") or bname.endswith("NHadrons"):
			xmin = -0.5
			xmax = 30.5
			nbins = int(ceil((xmax-xmin)/1))
		else:
			print "Warning: Selection fails for ", bname
			continue
			# xmin = chain.GetMinimum(bname)
			# xmax = chain.GetMaximum(bname)
			# nbins = 300

		# if the flag jetordered is set True, make additional six Pt ordered GenJet_Pt histograms
		# declare the histograms and set the bins
		if jetordered:
			if bname == "GenJet_Pt" or bname == "Jet_Pt":
				names = ["_", "_1st_","_2nd_","_3rd_","_4th_","_5th_", "_6th_"]
				for x in names:
					nbname = x.join(bname.rsplit("_", 1))
					h = ROOT.RDF.TH1DModel(nbname, nbname, nbins, xmin, xmax)
					HistoModels.append(h)
			else:
				h = ROOT.RDF.TH1DModel(bname, bname, nbins, xmin, xmax)
				HistoModels.append(h)

		else:
			h = ROOT.RDF.TH1DModel(bname, bname, nbins, xmin, xmax)
			HistoModels.append(h)

	print "You have chosen " + str(len(HistoModels)) + " physical quantities from originally " + str(len(branchnames)) + " available."
	#print "The corresponding histograms are: \n" + str(Histos)	
	return HistoModels



def fillHistosParallel(chain, HistoModels):
	''' 
	Fill the weighted data into the histos if the event is a tt+b-jets event.
	'''
	# Frame = ROOT.ROOT.RDataFrame(chain).Filter("GenEvt_I_TTPlusBB > 0")#.Define("commonweight", "Weight_XS*Weight_GEN_nom")
	rdf = ROOT.ROOT.RDataFrame(chain)
	rdffiltered = rdf.Filter("GenEvt_I_TTPlusBB > 0").Define("commonweight", "Weight_XS*Weight_GEN_nom")

	Histos = []
	for ihm,hm in enumerate(HistoModels):
			Histos.append(None)
			# for the first, second, ... leading jet histogram: fill it
			names = ["1st_Pt","2nd_Pt","3rd_Pt","4th_Pt","5th_Pt", "6th_Pt"]
			if any( x in hm.fName for x in names):
				# loop over all possible histograms and fill them with the according jet pT
				dummy = []
				for istr, string in enumerate(["1st", "2nd", "3rd", "4th", "5th", "6th"]):
					dummy.append(None)
					if "GenJet_" + string in hm.fName:
						# convert the read-write buffer ptr into a list
						print istr, "th hardest jet"
						dummy[istr] = rdffiltered.Define(hm.fName, "GenJet_Pt[%s]" %str(istr))
						Histos[ihm] = dummy[istr].Histo1D(hm, hm.fName, "commonweight")
						# h.Sumw2()
						# Histos.append(h)
					else:
						continue
			else:
				Histos[ihm] = rdffiltered.Histo1D(hm, hm.fName, "commonweight")
				# h.Sumw2()
				# Histos.append(h)
	# for histo in Histos:
	# 	histo.Sumw2()
	name = "%s.root"
	origin = chain.GetDirectory().GetName()
	if all(x in origin for x in ["ttbb", "amcatnlo"]):
		f = ROOT.TFile(name % "ttbb_4FS_amcatnlo_Histos","recreate")
		for h in Histos:
			h.Write()
		f.Close()
	    
	    
	elif all(x in origin for x in ["TTbb", "Powheg"]):
		f = ROOT.TFile(name % "ttbb_4FS_Powheg_OL_Histos","recreate")
		for h in Histos:
			h.Write()
		f.Close()

	elif all(x in origin for x in ["TTJets", "amcatnlo"]):
		f = ROOT.TFile(name % "ttjets_Histos","recreate")
		for h in Histos:
			h.Write()
		f.Close()

	elif origin.startswith("TTToSemi"):
		f = ROOT.TFile(name % "tt_semileptonic_Histos","recreate")
		for h in Histos:
			h.Write()
		f.Close()

	return Histos




# def writeHistos(Histos, origin, suffix = ""):
# 	''' 
# 	Write the histos into a new root file depending on the type of generated data used. 
# 	'''
# 	name = '%s'
# 	if suffix != "":
# 		name += "_" + suffix
# 	name += ".root"
# 	if all(x in origin for x in ["ttbb", "amcatnlo"]):
# 		f = ROOT.TFile(name % "ttbb_4FS_amcatnlo_Histos","recreate")
# 		for h in Histos:
# 			h.Write()
# 		f.Close()
	    
	    
# 	elif all(x in origin for x in ["TTbb", "Powheg"]):
# 		f = ROOT.TFile(name % "ttbb_4FS_Powheg_OL_Histos","recreate")
# 		for h in Histos:
# 			h.Write()
# 		f.Close()

# 	elif all(x in origin for x in ["TTJets", "amcatnlo"]):
# 		f = ROOT.TFile(name % "ttjets_Histos","recreate")
# 		for h in Histos:
# 			h.Write()
# 		f.Close()

# 	elif origin.startswith("TTToSemi"):
# 		f = ROOT.TFile(name % "tt_semileptonic_Histos","recreate")
# 		for h in Histos:
# 			h.Write()
# 		f.Close()



if __name__ == '__main__':
	main()