import ROOT
import sys
import os
import glob
from array import array

''' 
read files and write ttbb event data into histograms
use data generated by different generators respectively
execute with "python read.py <PATH/TO/NTUPLES/*.root>"
'''

# read all the .root files and pu the corresponding tree (here: MVATree) into a TChain
infiles = sys.argv[1:]
if len(infiles)>1: True
elif len(infiles)==1: infiles=glob.glob(infiles[0])

chain=ROOT.TChain("MVATree")
for inpath in infiles:
    inpath = os.path.abspath(inpath)
    chain.Add(inpath)
print chain.GetNtrees()

'''
Generate list of interesting TBranch in TChain and initialize corresponding histograms.
Veto for uninteresting quantities to reduce dimensionality.
'''

vetoes = ["GenCJet", "GenHiggs", "CHadron", "Q1", "Q2", "_W_", "_Nu_", "_Lep_", 
"PDGID", "Idx", "Evt_ID", "GenEvt", "Reco", "Tags",
"Trigger", "SF", "Weight_CSV", "Weight_LHA", "Weight_PU", "Weight_pu", "GenWeight"]

# make a list of branch names
# Why this? You may ask. It's because of a bug in ROOT that changes the pointer on a TBranch object, when asking a TChain object for it's minimum or maximum.
lBranches = chain.GetListOfBranches()
branchnames = []
for branch in lBranches:
	if any(x in branch.GetName() for x in vetoes): 
		print str(bname) + " vetoed"
		continue
	branchnames.append(branch.GetName())

# make a list of interesting branches for the second dimension
interesting2D = []
for bname in branchnames:
	if any(x in bname for x in vetoes): 
		interesting2D.append(bname)

# generate the 2D histograms
Histos = []
for bname in branchnames:
	xmin = chain.GetMinimum(bname)
	xmax = chain.GetMaximum(bname)
	for bname2 in interesting2D:
		if bname == "GenJet_Pt":
			names = ["_", "_1st_","_2nd_","_3rd_","_4th_","_5th_", "_6th_"]
			for x in names:
				nbname = x.join(bname.rsplit("_", 1))
				h = ROOT.TH2D()
				h.SetName(nbname + "_" + )
				h.SetTitle(nbname)
				h.SetBins(300, xmin, xmax)
				#h.SetMinimum(xmin)
				#h.SetMaximum(xmax)
				h.Sumw2()
				Histos.append(h)
		else:
			h = ROOT.TH2D()
			h.SetName(bname + "_" +)
			h.SetTitle(bname)
			h.SetBins(300, xmin, xmax)
			#h.SetMinimum(xmin)
			#h.SetMaximum(xmax)
			h.Sumw2()
			Histos.append(h)

print "You have chosen " + str(len(Histos)) + " physical quantities from originally " + str(len(branchnames)) + " available."
#print "The corresponding histograms are: \n" + str(Histos)	


''' 
Fill the data into the histos if the event is a tt+b-jets event.
Weight the events and call Sumw2 for uncertainties
'''

ievt=0
for e in chain:
	ievt+=1
	if ievt%5000==0:
		print "at event", ievt

	if not e.GenEvt_I_TTPlusBB > 0: continue    # GenEvt_I_TTPlusBB =1 for ttb =2 for tt2b =3 for ttbb

	for ih,h in enumerate(Histos):
		# for the first, second, ... leading jet histogram: fill it
		names = ["1st_Pt","2nd_Pt","3rd_Pt","4th_Pt","5th_Pt", "6th_Pt"]
		if any( x in h.GetName() for x in names):
			# loop over all possible histograms and fill them with the according jet pT
			for istr, string in enumerate(["1st", "2nd", "3rd", "4th", "5th", "6th"]):
				if "GenJet_" + string in h.GetName():
					# convert the read-write buffer ptr into a list
					dummy = e.GenJet_Pt
					if len(dummy)>=istr:
						b = []
						for i in range(len(dummy)):
							b.append(dummy[i])
						# sort it
						b.sort()
						# fill the histograms
						h.Fill(b[-istr], e.Weight_GEN_nom*e.Weight_XS)
				else:
					continue
		else:
			# fill the histograms for all other quantities
			# convert the read-write buffer ptr into a python list
			dummy = getattr(e, h.GetName())
			b = []
			if isinstance(dummy, (int, long, float)):
				dummy = [dummy]
			for i in range(len(dummy)):
				b.append(dummy[i])
			# fill the histogram
			for l in range(len(b)):
				h.Fill(b[l], e.Weight_GEN_nom*e.Weight_XS)


''' 
Write the histos into a new root file depending on the type of generated data used. 
'''

f = ROOT.TFile("2D_Histos.root","recreate")
for h in Histos:
	h.Write()
f.Close()